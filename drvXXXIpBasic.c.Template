/* Template of driver support for lanIpBasic.c */

/* $Id$ */

/* Consult the implemetations
 *   drvLan9118IpBasic.c: dumb PIO driven, FIFO-type device.
 *                        (no descriptors, packets are written-to
 *                        read-from device FIFOs using PIO).
 *   drvMveIpBasic.c:     sophisticated GiGE device with descriptor
 *                        rings and DMA.
 *
 * Note that the mentioned files provide only 'glue code'. The main
 * driver implementation is outside of lanIpBasic. However, these
 * drivers must provide appropriate hooks (for raw packet transmission
 * and reception) so that the interface defined in this file can be
 * implemented.
 */

/* fwd decl of interface struct */
struct IpBscIfRec_;

/* MACROS USED BY lanIpBasic.c;
 * These macros must be implemented by the driver so that the
 * stack can read/send data.
 */

/* How to send the ARP request structure:
 * Either lock, fillin-IP addr, send, unlock
 * or copy, fillin send copy...
 * The (ipbif_p)->arpreq struct is only modified by this macro so
 * any lock used here is adequate.
 */
#define NETDRV_ATOMIC_SEND_ARPREQ(ipbif_p, ipaddr)					\
	do {															\
		DrvXXX 	drv_p = (ipbif_p)->drv_p;							\
		size_t     sz = sizeof((ipbif_p)->arpreq);					\
																	\
		LOCK(drv_p);												\
																	\
			/* arpreq is locked and may be modified */				\
			set_tpa(&(ipbif_p)->arpreq.arp, ipaddr);				\
																	\
			/* send request */										\
			drvXXXSend(drv_p, &(ipbif_p)->arpreq, sz);				\
																	\
		UNLOCK(drv_p);												\
	} while (0)

/* Read 'nbytes' from device into buffer at 'ptr'.
 * This macro helps supporting 'FIFO'-type devices with a need
 * for PIO.
 * More powerful controllers which DMA packet data into memory
 * don't need this if the buffer handed over to lanIpProcessBuffer()
 * already contains packet data.
 */
#define NETDRV_READ_INCREMENTAL(ipbif_p, ptr, nbytes)						\
	drvXXXReadIncremental((DrvXXX)(ipbif_p)->drv_p, (ptr), (nbytes))

/* Send a packet header (size 'hdrsz') and payload data (size 'dtasz').
 * The header and payload areas are not necessarily contiguous.
 * 'phdr' may be NULL if 'data' already contains the header.
 * There is nothing magic about the header -- this is just 'poor-man's gathering'
 * i.e., support for sending data from two non-contiguous areas.
 *
 * This shows how a macro can alternatively be a inline routine.
 * Do fwd. declaration here and provide implementation after inclusion
 * of "lanIpBasic.c" so that internal features will be available.
 *
 * NOTE: this entry point is deprecated for chips which are not
 *       FIFO based but do their own DMA. Such chips should only
 *       implement NETDRV_ENQ_BUFFER and leave NETDRV_SND_PACKET
 *       *undefined*
 */
/* all-capital NETDRV_SND_PACKET MUST be a macro */
#define NETDRV_SND_PACKET netdrv_snd_packet
static inline int 
netdrv_snd_packet(struct IpBscIfRec_ *ipbif_p, void *phdr, int hdrsz, void *data, int dtasz);

/* Enqueue and send a buffer; in contrast to NETDRV_SND_PACKET() which
 * sends data out of arbitrary memory (and therefore always involves some
 * kind of copying) the buffer handed to NETDRV_ENQ_BUFFER() is a buffer
 * managed by lanIpBasic (via getrbuf()/relrbuf()).
 * The driver for a DMA-capable controller may simply pass the device
 * the buffer pointer and the descriptor-sweeper may then release the
 * buffer (relrbuf()) after transmission.
 * The driver for a DMA-less controller may just call NETDRV_SND_PACKET()
 * (copy+send buffer) and release the buffer (this example).
 */
#define NETDRV_ENQ_BUFFER(ipbif_p, pbuf, nbytes)						\
	do {																\
		NETDRV_SND_PACKET((ipbif_p), 0, 0, pbuf, nbytes);				\
		relrbuf(pbuf);													\
	} while (0)

/* Read MAC address from device/driver into a buffer */
#define NETDRV_READ_ENADDR(ipbif_p, buf)									\
	drvXXXReadEnaddr((DrvXXX)(ipbif_p->drv_p), (buf))

/* Driver header name with angle brackets e.g., <drvXXX.h> */
#define NETDRV_INCLUDE	<drvXXX.h>

/* Include main C-file here */
#include "lanIpBasic.c"

/* Implement fwd-declared bits */
static inline int 
netdrv_snd_packet(IpBscIf ipbif_p, void *phdr, int hdrsz, void *data, int dtasz)
{
DrvXXX drv_p = (DrvXXX)ipbif_p->drv_p;

	LOCK(drv_p);
	if ( phdr ) {
		drvXXXWriteTxFifo(drv_p, phdr, hdrsz);
	} else {
		hdrsz = 0;
	}
	drvXXXWriteTxFifo(drv_p, data, dtasz);
	UNLOCK(drv_p);
	return hdrsz + dtasz;
}

/* Implement high-level routines (how to create, start, shutdown driver);
 *
 * lanIpBscDrvCreate(): allocates a driver slot and do first initialization.
 *
 * NETDRV_START() :     create and start driver task(s) and other resources.
 *                      
 *                      Transmission: largely handled by SND_PACKET and 
 *                      ENQ_BUFFER macros above. If the driver and device
 *                      support DMA then the descriptor ring scavenger
 *                      must release sent buffers (relrbuf()).
 *
 *                      Reception:
 *                        DMA-capable / descriptor ring type device:
 *                           preallocate buffers (getrbuf()) and fill
 *                           RX ring. As packets are received driver
 *                           task calls lanIpProcessBuffer() and
 *                           subsequently either calls relrbuf() or
 *                           leaves the buffer in the ring. In the
 *                           former case, the RX-buffer-allocator
 *                           must obtain new buffers calling getrbuf().
 *
 *                        FIFO-type device:
 *                           RX task calls 
 *                              getrbuf() // allocate buffer
 *                              fill_buffer_from_device()
 *                              lanIpProcessBuffer() // munch
 *                              relrbuf() // release buffer
 *                           Note that the 'fill_buffer_from_device()'
 *                           step can be omitted if the READ_INCREMENTAL
 *                           macro is implemented. lanIpProcessBuffer will
 *                           then pull data into the buffer on the fly
 *                           (and only as much as needed).
 *
 * NETDRV_SHUTDOWN():     shutdown driver task and release all
 *                        resources owned by the driver.
 *                        Routine must be able to clean up a partially
 *                        initialized driver (e.g., created but not
 *                        started). In particular, it must handle
 *                        the case of a NULL driver handle (doing
 *                        nothing).
 */
