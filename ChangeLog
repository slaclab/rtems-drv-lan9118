2011/09/29 (TS):
 - lanIpBasic.h: export/declare lanIpBscAddBufs().
2011/09/29 (TS):
 - Makefile.am:    added rules to Makefile.am to build + clean PDF
 - lanIpBasic.tex: further work.
 - lanIpBasic.h, lanIpBasicSetup.h: added comment that ethernet addresses
                   are arrays of 6 octets
2011/09/29 (TS):
 - added lanIpBasic.tex
2011/07/21 (TS):
 - e1k_lldrv.c: BUGFIX - only first unit would be accepted because
   return values of pci_scan() (== unit) other than zero were rejected.
   Accept any that is not -1.
2011/07/21 (TS):
 - e1k_lldrv.c: register/unregister this driver with e1000 generic
   support (new feature of e1000_osdep).
2011/04/19 (TS):
 - lanIpBasic.c, lanIpBasic.h: added udpSockRefBuf().
2010/06/30 (TS):
 - lanIpBasic.c: Let udpSockDestroy() return ENXIO instead of EBADFD
   (not POSIX and gone in newlib-1.18/rtems-4.10) if the socket had no
   queue attached.
2010/06/16 (TS):
 - drvLan9118.c: BUGFIX -- ISR was installed and interrupts enabled BEFORE
   the daemon task executed. Thus it could happen that interrupts were lost
   (because the RTEMS event was posted to an invalid TID or to one that
   had not been started yet) leaving the daemon blocked and interrupts disabled.
2010/06/11 (TS):
 - drvGnrIpBasic.c: BUGFIX -- rtems_task_start() clears all RTEMS events.
   Therefore, IRQs happening between hw_start (which enables IRQs) and
   task_start are lost. To make sure no IRQs are lost we enable irqs
   from the driver task before entering its work loop.
2010/04/14 (TS):
 - Makefile.am, tsec_lldrv.c: Added support for mvme3100's tsec NIC
   (***UNTESTED*** [I don't have a transition module for testing with
   a secondary ethernet port]).

   NOTE: This requires rtems-4.10 with some new API features!

2010/03/17 (TS):
 - lanIpBasic.c: Fixed IGMP problems:
     o igmp_send_msg(): even if buffer allocation fails a valid
       MC address may still be found. Moved lookup outside of
       'if ( buf_p )' statement.
     o BUGFIX: igmp_timeo() dereferenced 'mca' pointer even if
       no address was found (which could happen if no buffer
       was available, see above).
   With these two fixes: if igmp_timeo() finds that 'mca' lookup
   failed it means that the group was unsubscribed between the
   callout task marking the callout as not pending and the 
   igmp_timeo() being executed. In this case, no callout_deactivate()
   operation is necessary because the mca and associated callout
   struct are defunct and will be destroyed.
     o should assert !lanIpCallout_pending instead of !lanIpCallout_active
       after a trystop operation (because if trystop fails the callout
       is still active but not pending).
2010/02/09 (TS):
 - mve_lldrv.c: Uncommented BSP_MVE_IRQ_LINK which was commented (zero)
   and thus not handling link interrupts for unknown reasons (seems to
   have been present since version 1.1). Probably this is a leftover
   from when we didn't have the ack_link_chg entry point.
2010/02/09 (TS):
 - drvGnrEthIpBasic.c: Partly reverted change made on 2009/10/17. By
      default DO stop sending if link is down. However, a variable
      'drvGnreth_ignore_stopped' was introduced to override this
      default behavior if needed.
2010/02/04 (TS):
 - lanIpBasic.c:
    o BUGFIX: _udpSockSendTo_internal() must release rbuf even if the
      call fails! (As per udpComm API documentation these are the
      semantics. Implementing different semantics for udpSock would be
      confusing.)
2010/02/04 (TS):
 - lanIpBasic.c:
    o BUGFIX: getrbuf() dereferenced NULL pointer if no buffers
      were available.
    o Added counter for #of times getrbuf() failed due to lack of buffers.
    o verify that destination IP is on same subnet as interface. Let
      'arpLookup()' return -ENETUNREACH otherwise. This affects udpSock
      calls like udpSockConnect(), udpSockSendTo(), udpSockSendBufTo().
    o pass return status of udpSockHdrsInitFromIf() on rather than returning
      -ENOTCONN if the call fails.
2010/01/06 (TS):
 - lanIpBasic.h, lanIpBasic.c, lanIpBasicTest.c, drvUdpSock.c: Added 'flags'
   argument to udpSockConnect() and a UDPSOCK_MCPASS flag. When this is set
   and the peer IP address is a multicast address then -- deviating from BSD
   semantics -- the source IP address and port of incoming packets are allowed
   to differ from the connected peer's.
2009/12/15 (TS):
 - drvLan9118.c, drvLan9118.h: added 'drvLan9118BcFilterSet()' for controlling
   the bcast filter bit independently from/after 'setup'.
2009/12/14 (TS):
 - lanIpBasic.c, lanIpProto.h: added 'may_alias' attribute to several unions
   that are used for deliberate type-punning.
2009/12/14 (TS):
 - lanIpBasicSetup.h: BUGFIX -- had missed to declare lanIpIf as 'extern' :-(
   so it would end up being multiply defined.
2009/12/09 (TS):
 - lanIpBasic.c, lanIpBasic.h: Added lanIpBscGetStats()/lanIpBscFreeStats()
   for obtaining 'machine-readable' summary statistics.
2009/12/09 (TS):
 - lanIpBasic.c:
     o BUGFIX - _udpSockSendTo_internal() would not send if driver
                provided NETDRV_SND_PACKET() and a buffer was passed.
     o update num_rbufs in config struct when new buffers are added
       so that reading the config struct always reflects the correct
       amount.
     o Added (many) statistics counters.
 - lanIpBasic.c, lanIpBasic.h:
	 o Added lanIpBscDumpIfStats(), lanIpBscDumpConfig().
 - Makefile.am: Added lanIpBasic.c to EXTRA_liblanIpBasic_mve_a_SOURCES.
 - drvAmdEthIpBasic.c:
     o clamp ring sizes to max defined by low-level driver (but not
       publicly known :-().
 - drvGnrIpBasic.c, drvLan9118IpBasic.c, e1k_lldrv.c, mve_lldrv.c,
   drvAmdEthIpBasic.c, gnreth_lldrv.h, lanIpBasic.c: 
     o New NETDRV entry points for retrieving driver name and for 
       dumping driver statistics.
2009/12/07 (TS):
 - Makefile.am, hash: Added 'lhtbl' from 'hash' CVS-module.
2009/12/07 (TS):
 - lanIpBasic.c, drvAmdEthIpBasic.c, drvGnrEthIpBasic.c, lanIpBasic.h:
   Added lanIpBscConfig() entry point for configuring certain stack
   parameters (request by S. Norum).
2009/12/07 (TS):
 - Makefile.am: unbundled udpComm, padProto etc. (see below) from lanIpBasic.
   Added support for building multiple lanIpBasic variants (multiple drivers)
   for a single BSP.
2009/12/07 (TS):
 - lanIpBasic.c: removed udpComm API (now an unbundled EPICS module in LCLS land).
2009/12/07 (TS):
 - e1k_lldrv.c: fixed compiler warnings (alloc_rxbuf() callback nowadays
   takes 'uintptr_t *' argument).
2009/12/06 (TS):
 - bpmsim.c, bpmsim.h, hostStream.c, hostStream.h, padProto.c, padProto.h,
   padProtoHost.c, padStream.c, padStream.h, sddsrd.c, sddsrd.h,
   udpCommBSD.c, udpComm.h: Unbundled and removed. These are now part
   of EPICS modules 'udpComm.till'.
2009/12/05 (TS):
 - BUGFIX: padStreamStart() would call udpSockHdrsInit() with a socket arg
   of (-1). This is invalid since the socket arg is needed to find
   an interface structure from where the source IP and ethernet
   addresses can be loaded. Bogus IP and ethernet addresses were used!
   Thanks to the networking group - they reported seeing identical and bad
   MAC addresses.
   Added new udpSockHdrsInitFromIf() routine to be used by padStream
   (which for efficiency reasons does not use 'sockets').
 - Let udpSockHdrsSetlen() clear the UDP checksum (for sake of consistency
   since the routine also computes and sets the IP checksum).
 - Always use 'memcpy' to initialize IP checksum to zero before
   computing it (via assembly code). Hopefully this solves the
   alias problems...
2009/10/17 (TS):
 - drvAmdEthIpBasic.c: fixed typo. SEM_SMTX semphore type was removed;
   use SEM_MUTX (ordinary binary semaphore with priority inheritance)
   instead.
 - drvGnrEthIpBasic.c:
    o Replaced SEM_SMTX by SEM_MUTX (see above).
    o Driver now supports two tasks with different priorities (lower
      priority for link events and TX cleanup). This uses the new 
      low-level API of the 'beatnik' (and mvme3100) ethernet drivers.
    o Don't stop sending if link is down (loopback/debug mode may not
      have a valid link).
 - drvLan9118.c: Replaced SEM_SMTX by SEM_MUTX (see above).
 - e1k_lldrv.c:
    o Renaming some stuff.
    o Changed timing tuneup for lower latencies ('int_delay' variable
      default values.
    o Driver now implements new API allowing the higher level driver
      to use different tasks for RX and less important TX/Link work.
 - gnreth_lldrv.h, mve_lldrv.h:
   Removed 'transparent_union' magic. Instead, the user defines the
   LLDev type to match the low-level driver's declaration.
 - hostStream.c: Need to #include <stdlib.h>
 - hwtmr.h: Added 64-bit timers; added hr-timer for x86.
 - lanIpBasic.c:
    o Reworked math to align rbufs properly.
    o SEM_SMTX was removed; simple binary semaphores do not support
      priority inheritance. Silently ignored under pre-4.10; semaphore
      creation fails under 4.10.
    o Added yet another work-around for nasty alias-rule problem when
      computing IP checksum!
    o Set DF (don't fragment) in IP headers.
    o Fixed bug when extending IP header checksum to cover RA option word.
    o Added more verbosity in debug mode.
    o Added MC-loopback flag to socket data structure and a call to change
      the value (udpSockSetMcastLoopback()).
 - udpComm.h, lanIpBasic.c, udpCommBSD.c:
   UDPCOMM API is now macro/inline free. Apps compiled against UDPCOMM
   are binary-compatible with lanIpBasic or udpCommBSD.
 - lanIpBasic.h: Added udpSockSetMcastLoopback() declaration.
 - padProtoHost.c: udpCommReturnPacket() now requires a socket-descriptor
   argument.
 - padStream.c: Replaced SEM_SMTX by SEM_MUTX (see above).
     
   

2009/09/14 (TS):
 - lanIpBasic.c: re-arranged source code to group logically connected parts.
   Added more comments.

   removed socket-descriptor argument from udpCommReturnPacket() again.
   We can store the receiving interface hidden in the buffer.

2009/09/14 (TS):
 - drvGnrIpBasic.c: removed dead code. Moved inclusion of header to after
   inclusion of lanIpBasic.c so that we are sure <rtems.h> has not been
   included yet.

2009/09/14 (TS):
 - udpComm.h, padProto.c, udpCommBSD.c: removed socket-descriptor argument
   from udpCommReturnPacket() again. We can store the receiving interface
   hidden in the buffer.

 - udpComm.h: Paranoia protection again overflow of multiplication in ms2ticks().
 - lanIpBasic.h: Added 'udpSockGetBufIf()'.

2009/09/10 (TS):
 - lanIpBasic.c: moved 'arpPutEntry()' from UDP handling
   in handleIP() to low-priority worker.

2009/09/10 (TS):
 - drvAmdEthIpBasic.c, drvGnrIpBasic.c, drvLan9118IpBasic.c,
   drvXXXIpBasic.c.Template, lanIpBasic.c, lanIpBasic.h,
   lanIpBasicTest.c:
   renamed lanIpBscDrvStart()/lanIpBscDrvShutdown() ->
   NETDRV_START() / NETDRV_SHUTDOWN().

2009/09/10 (TS):
 - drvLan9118.c, drvUdpSock.c, lanIpBasic.c, lanIpBasic.h,
   lanIpBasicTest.c, lanIpProto.h, padStream.c: renamed and
   restructured some of the protocol header structs (but I'm
   still not quite happy).

2009/09/10 (TS):
 - lanIpBasic.c:
     o moved ARP handling to low-priority worker.
     o BUGFIX: cannot use 'arprep' buffer for sending ARP reply
       since a new request may arrive before our reply has made
       it out of the TX. Instead, we re-use the received packet
       but must copy arprep there (no issue since we do this
       from the low-priority worker anyways).

2009/09/10 (TS):
 - lanIpBasic.c:
     o moved IGMP checksum calculation to low-priority worker (processIgmp()).
     o moved ICMP handling low-priority worker (processIcmp()).

2009/09/10 (TS):
 - lanIpBasic.c: many changes and additions; multicast + IGMPv2
   support were added. In more detail:
    o added 'callout' facility (copy of my implementation for libbsdport)
      for scheduling work/callbacks in the future.
    o added htonsc(), htonlc() for byte-swapping constants. These
      'routines' are designed to be optimized away by the compiler
      (which can perform the swapping at compile-time).
    o BUGFIX: RBUF_ALIGN() macro didn't really align...
    o added 'refcnt' to 'rbuf's so they can be referenced by
      multiple users. Buffer is released when the refcnt drops to 0.
    o rbuf now also holds a pointer to the interface associated
      with the buffer.
    o added 'freeBufMem()' for cleaning up rbufs allocated from the
      heap. This is executed when shutting down the stack.
    o added support for IP4 multicast.
    o implemented IGMP (v2; host-part only).
    o added low-priority task for executing general work w/o real-time
      requirements. 
    o added convenience wrappers: task_spawn(), sem_create(), bsem_crate(),
      mutex_lock(), mutex_unlk().
    o added a workaround to enable us to synchronize with task termination
      a la 'pthread_join()'. The respective routines are task_init(),
      task_leave() (to be called by target task) and task_pseudojoin()
      for the task that whishes to kill and wait.
    o changed ARP implementation. We no longer send a request and delay
      the calling task for a number of ticks but synchronize with
      arrival of a reply.
      Added 'arpTeardown()' for releasing resources when shutting down
      the stack.
    o replaced inet_ntop() with trivial implementation (avoid dependency
      on BSD headers).
    o added 'loopback' argument to 'handleIP()' to inform the routine
      that the buffer already contains a packet (prevent chip drivers of
      the 'FIFO' type from reading).
    o lanIpBscIfDestroy() now returns status.
    o lanIpBscIfCreate()/lanIpBscIfDestroy() call driver start/shutdown
      entry points.
    o created a generic udpSockSendTo_internal() routine which is called
      by udpSockSend(), udpSockSendTo(), udpSockSendBuf(), udpSockSendBufTo()
      wrappers.
    o added udpSockGetIf()
    o renamed udpSockSendBufRawIp() -> lanIpBscSendBufRawIp() and added
      'interface' argument.
    o added lanIpBscInit() and lanIpBscShutdown() procedures for initializing
      and shutting down, respectively, driver- and interface-independent
      resources.

2009/09/10 (TS):
 - lanIpBasicTest.c:
    o lanIpTakedown() returns error status.
    o driver is no longer started from lanIpSetup() nor
      stopped from lanIpTakedown() but these steps are
      now performed by lanIpBscIfCreate() and lanIpBscIfDestroy(),
      respectively.
    o lanIpSetup() and lanIpTakedown() call new initializer
      and finalizer of lanIpBasic (general stuff that is not
      associated with interface or driver), lanIpBscInit() and
      lanIpBscShutdown().
    o udpSockSendBufRawIp() was renamed to lanIpBscSendBufRawIp()
      which now also takes an 'interface' argument.

2009/09/07 (TS):
 - lanIpBasic.h:
    o added comments regarding thread-safety.
    o added 'udpSockUdpBufPayload()' 
    o added 'udpSockSendBuf()' and 'udpSockSendBufTo()' which
      allow buffers to be sent w/o copying.
    o added udpSockSetIfMcast() 
    o added udpSockJoinMcast()/udpSockLeaveMcast()
    o added udpSockGetIf()
    o added lanIpBscInit()/lanIpBscShutdown() which init/finialize
      driver-independent stuff.
    o lanIpBscIfDestroy() now returns status code
    o renamed udpSockSendBufRaw/udpSockSendBufRawIp
      -> lanIpBscSendBufRaw()/lanIpBscSendBufRawIp()

2009/09/07 (TS):
 - lanIpProtol.h: added igmp (V2) header type. Added 'may_alias'
   attribute to different header types.

2009/09/07 (TS):
 - padProto.c, padProtoHost.c, udpComm.h, udpCommBSD.c:
   udpCommReturnPacket() now takes a socket-descriptor argument.

2009/09/07 (TS):
 - mve_lldrv.c: Added multicast-support driver entry points.

2009/09/03 (TS):
 - lanIpBasicSetup.h: lanIpTakedown() now returns error/status code.

2009/09/03 (TS):
 - gnreth_lldrv.h: Added multicast-support driver entry points.

2009/09/03 (TS):
 - e1k_lldrv.c:
    o Added comments explaining e1000_mta_clr() function (which parallels
      intel's e1000_mta_set() and which is needed to remove a single
      MC hash from filter.
    o Implemented multicast support functions.

2009/09/03 (TS):
 - drvGnrIpBasic.c:
    o Added support for adding/removing MC addresses from multicast
      filter.
    o Use new convenience-wrappers (bsem_create, task_spawn, ...) for
      semaphore and task creation.
    o Use new 'task_pseudojoin' facility to synchronize with driver
      task termination.

2009/09/03 (TS):
 - drvAmdEthIpBasic.c:
    o Do 2-byte adjustment of buffer start address
      in 'amd_send_buf_locked()'. amd_send_buf_locked() can now use
      'split-packets' where a UDP header and payload are stored in
      separate buffers.
    o Use new convenience-wrappers (bsem_create, task_spawn, ...) for
      semaphore and task creation.
    o Use new API (amdeth.h) for amdEthCloseDev() providing a 'cleanup'
      callback which releases buffers present in the rings when the
      driver is shut down.
    o Use new 'task_pseudojoin' facility to synchronize with driver
      task termination.

2009/08/29 (TS):
 - drvLan9118.c: create a semaphore and block until driver task exits
   when shutting-down the driver.

2009/08/27 (TS):
 - drvLan9118.h, drvLan9118.c, drvLan9118IpBasic.c: Added support for
   multicast.

2009/08/24 (TS):
 - e1k_lldrv.c:
    o added 'e1000_mta_clr()' routine which is analogous to intel driver's
      'e1000_mta_set()' and can be used to reset an individual bit in the
      multicast filter. This routine might need to be updated if a new
	  intel driver version is ported.
    o added multicast support (drv_e1k_mcast_filter_clear(),
      drv_e1k_mcast_filter_accept_add(), drv_e1k_mcast_filter_accept_del()).	
    o added multicast filter hooks to low-level driver entry point table.
 - mve_lldrv.c: added multicast filter hooks to low-level driver entry point
   table.
 - gnreth_lldrv.h: added multicast filter hooks to low-level driver entry
   point table.
 - drvGnrIpBasic.c: added NETDRV_MC_FILTER_ADD(), NETDRV_MC_FILTER_DEL()
   using multicast filter hooks from low-level driver table.
 - drvLan9118.h, drvLan9118.c: added new entry points drvLan9118McFilterClear(),
   drvLan9118McFilterAdd() and drvLan9118McFilterDel().
 - drvLan9118IpBasic.c: defined NETDRV_MC_FILTER_ADD(), NETDRV_MC_FILTER_DEL()

2009/08/24 (TS):
 - drvLan9118IpBasic.c, drvXXXIpBasic.c.Template: NETDRV_SND_PACKET must
   now be a macro. Renamed inline function to use all-lower-case letters
   and defined NETDRV_SND_PACKET.

2009/08/24 (TS):
 - drvGnrIpBasic.c:
    o Removed deprecated NETDRV_SND_PACKET().
    o Removed side-effects from assert() statements. Use new
      mutex_lock(), mutex_unloc() primitives from lanIpBasic.c
  
2009/08/24 (TS):
 - drvAmdEthIpBasic.c:
    o Removed deprecated NETDRV_SND_PACKET().
    o Removed side-effects from assert() statements. Use new
      mutex_lock(), mutex_unloc() primitives from lanIpBasic.c
    o Added NETDRV_MC_FILTER_ADD(), NETDRV_MC_FILTER_DEL().
    o Fixed typo: Changed driver mutex name from 'mveL' -> 'amdL'.
   
2009/08/06 (TS):
 - lanIpProto.h, lanIpBasic.c: Fix packet size to true ethernet limit;
   separated packet size from rbuf alignment and size. Padding for
   proper alignment is now added to the 'rbuf' data type.
 
   Added 'lanIpBasicAddBufs()' allowing to add buffers at run-time.

   Added 'reference-count' to rbuf and a 'refrbuf()' entry point
   for incrementing the reference-count. 'relrbuf' only really
   releases a buffer when the refcnt reaches zero.
2009/08/06 (TS):
 - drvUdpSock.c: clip transmitted payload to UDPPAYLOADSIZE, not LANPKTMAX!
2009/08/06 (TS):
 - drvAmdEthIpBasic.c: since buffer pointer is adjusted by ETHERPADSZ
   must reduce buffer size by same amount.
2009/08/06 (TS):
 - added 'e1k_lldrv.c' which contains low-level driver entry
   points for intel e1000 chips. The file also implements
   these entry points based on intel's e1000_api.h.
   The driver is derived from 'if_em' (intel).
2009/08/06 (TS):
 - renamed 'drvMveIpBasic.c' -> 'drvGnrIpBasic.c' and created a 
   'low-level driver' API. This allows for re-using this code
   for all NIC drivers that provide the same low-level API as
   the mv64360 (i.e., most recently written drivers by me
   such as the mvme3100's FEC or an e1000 driver based on
   intel's e1000_api.h).
   mv64360-specific entry points are defined in 'mve_lldrv.c'.
2009/07/31 (TS):
 - do not byteswap IP header checksum when inserting (fillinSrcCsumIp()).
2009/07/28 (TS):
 - removed unnecessary inclusion of drvLan9118.h from lanIpBasic.h.
 - silenced some compiler warnings
 - added udpCommJoinMcast(), udpCommLeaveMcast() and udpCommSetIfMcast().
2009/06/26 (TS):
 - added udpCommAllocPacket()
 - added udpCommSendPkt(), udpCommSendPktTo() (BSD only, so far)
 - define UDPCOMM_PKTSZ (max size of payload)
 - Makefile.Host builds a small library with just udpCommBSD
2009/04/21 (TS):
 - udpSockHdrsReflect() needs to convert port number to host endianness
   before passing to fillinSrcCsumUdp().
2009/02/18 (TS):
 - iir2_bpmsim declared in new header (bpmsim.h)
 - iir2_bpmsim takes new argument (2nd initial value) which
   allows to add random phase + time-of-arrival.
 - add (compile-time-optional) SDDS reader which allows
   padProtoHost to play back waveforms from an SDDS file.
 - streamSim() adds (common-mode to all 4 channels) random
   phase + time-of-arrival to simulated waveforms.
 - padProtoHost has 'server mode' with new '-P <server_xmit_period>'
   option. Transmit simulated or SDDS-playback waveform every P seconds.
   (in server mode).
 - if port # (-p) is zero use PADPROTO_STRM_PORT in listener mode.
2008/10/29 (TS): Fix problems reported by Stephen Norum (beatnik)
 - TX ring was apparently exhausted (send returning -ENOSPC). This
   occurred due to corruption because the driver task swiped the TX
   ring w/o acquiring the lock.
 - After re-plugging cable the port seemed to be dead. Need to
   propagate link change to serial port; use new MVE driver entry
   point BSP_mve_ack_link_chg() for this purpose.
2008/10/17 (TS):
 - define minimal alignment RX packets are guaranteed to have
   in lanIpProto.h. Made sure the BSD implementation of udpComm
   maintains the same alignment. This is important accessing when
   packet contents with a vector-engine or other method that works
   faster on properly aligned data.
 - renamed lanIpBasicTest.h -> lanIpBasicSetup.h
 - provide helper inlines (lanIpBasic.c) for drivers to manipulate
   unaligned IP addresses in ARP headers.
 - cleaned-up and documented the 'setup' api, i.e., routines the drivers
   must provide so that they can be attached/detached to/from the stack,
   started and shutdown etc.
 - removed EEPROM access from lanIpBasicTest API; this is only relevant
   for the lan9118 where we couldn't read EEPROM after initializing the
   device. We now read the 9118's EEPROM into a ram-shadow buffer
   when we start the device and transparently provide cached data
   to the user.
2008/10/16 (TS):
 - do not access IP addresses inside of ARP packets as 32-bit entities
   because they are not properly aligned. Provided helper inline routines
   to do this (lanIpBasic.c).
 - merged lanIpBscIfCreate + lanIpBscIfInit -> new API lanIpBscIfCreate().
 - lanIpBasic.c, lanIpBasic.h, udpComm.h: socket 'connection' may now
   be changed on the fly (w/o disconnecting first). Again, IIRC we simply
   follow BSD semantics.
 - lanIpBasic.c, lanIpBasic.h, udpComm.h: socket creation may now be
   passed a zero port number which lets the library pick an available
   port (following BSD socket semantics).
 - padProtoHost.c: added 'server' mode which can stream (simulated) data
   to a client.
 - padStream.c: bugfix; streamSim() used wrong stride in col-major mode;
   has to be 4 (n-channels) not nsamples.
2008/1/18 (TS):
 - lanIpBasic:
     - added udpSockNRead() to find number of bytes in RX queue available
	   for reading
	 - eliminated 'Peer' struct. Moved 'interface' to socket (where it
	   belongs).
	   The socket now holds a UDP header and a flag to indicate if
	   the socket is 'connected'. If 'connected' the UDP header
	   holds the peer information. If not connected the header can
	   be reused by udpSockSendTo() for various destinations.
	 - added udpSockSendTo() for communication over unconnected sockets.
	 - lock socket while in udpSockConnect()
 - drvUdpSock:
     - buffer leftover chars from a received packet for subsequent read.
 - added 'drvUdpSock' - a simple driver to provide std. filesystem
   I/O over lanIpBasic/UDP 'sockets'.
2008/1/17 (TS):
 - renamed EtherHeader -> EthHeader; there was a name conflict with
   SPEAR software / the AMD pcnet32 driver for which I wanted to add
   support.
 - added support for AMD 79c97x chips (PMC card which is handy; the
   ultimate goal is using udpComm for a GDB connection.
 - FIXED: endian-ness bug: IP checksums must not be converted to network
   byte-order.
2007/10/4 (TS):
 - udpSockSend() return value was inconsistent with BSD semantics
   (thanks to Stephen Norum) because it also counted the header bytes.
2007/9/6 (TS):
 - eliminated 'sd' argument from udpCommReturnPacket().
