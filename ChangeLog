2009/08/06 (TS):
 - added 'e1k_lldrv.c' which contains low-level driver entry
   points for intel e1000 chips. The file also implements
   these entry points based on intel's e1000_api.h.
   The driver is derived from 'if_em' (intel).
2009/08/06 (TS):
 - renamed 'drvMveIpBasic.c' -> 'drvGnrIpBasic.c' and created a 
   'low-level driver' API. This allows for re-using this code
   for all NIC drivers that provide the same low-level API as
   the mv64360 (i.e., most recently written drivers by me
   such as the mvme3100's FEC or an e1000 driver based on
   intel's e1000_api.h).
   mv64360-specific entry points are defined in 'mve_lldrv.c'.
2009/07/31 (TS):
 - do not byteswap IP header checksum when inserting (fillinSrcCsumIp()).
2009/07/28 (TS):
 - removed unnecessary inclusion of drvLan9118.h from lanIpBasic.h.
 - silenced some compiler warnings
 - added udpCommJoinMcast(), udpCommLeaveMcast() and udpCommSetIfMcast().
2009/06/26 (TS):
 - added udpCommAllocPacket()
 - added udpCommSendPkt(), udpCommSendPktTo() (BSD only, so far)
 - define UDPCOMM_PKTSZ (max size of payload)
 - Makefile.Host builds a small library with just udpCommBSD
2009/04/21 (TS):
 - udpSockHdrsReflect() needs to convert port number to host endianness
   before passing to fillinSrcCsumUdp().
2009/02/18 (TS):
 - iir2_bpmsim declared in new header (bpmsim.h)
 - iir2_bpmsim takes new argument (2nd initial value) which
   allows to add random phase + time-of-arrival.
 - add (compile-time-optional) SDDS reader which allows
   padProtoHost to play back waveforms from an SDDS file.
 - streamSim() adds (common-mode to all 4 channels) random
   phase + time-of-arrival to simulated waveforms.
 - padProtoHost has 'server mode' with new '-P <server_xmit_period>'
   option. Transmit simulated or SDDS-playback waveform every P seconds.
   (in server mode).
 - if port # (-p) is zero use PADPROTO_STRM_PORT in listener mode.
2008/10/29 (TS): Fix problems reported by Stephen Norum (beatnik)
 - TX ring was apparently exhausted (send returning -ENOSPC). This
   occurred due to corruption because the driver task swiped the TX
   ring w/o acquiring the lock.
 - After re-plugging cable the port seemed to be dead. Need to
   propagate link change to serial port; use new MVE driver entry
   point BSP_mve_ack_link_chg() for this purpose.
2008/10/17 (TS):
 - define minimal alignment RX packets are guaranteed to have
   in lanIpProto.h. Made sure the BSD implementation of udpComm
   maintains the same alignment. This is important accessing when
   packet contents with a vector-engine or other method that works
   faster on properly aligned data.
 - renamed lanIpBasicTest.h -> lanIpBasicSetup.h
 - provide helper inlines (lanIpBasic.c) for drivers to manipulate
   unaligned IP addresses in ARP headers.
 - cleaned-up and documented the 'setup' api, i.e., routines the drivers
   must provide so that they can be attached/detached to/from the stack,
   started and shutdown etc.
 - removed EEPROM access from lanIpBasicTest API; this is only relevant
   for the lan9118 where we couldn't read EEPROM after initializing the
   device. We now read the 9118's EEPROM into a ram-shadow buffer
   when we start the device and transparently provide cached data
   to the user.
2008/10/16 (TS):
 - do not access IP addresses inside of ARP packets as 32-bit entities
   because they are not properly aligned. Provided helper inline routines
   to do this (lanIpBasic.c).
 - merged lanIpBscIfCreate + lanIpBscIfInit -> new API lanIpBscIfCreate().
 - lanIpBasic.c, lanIpBasic.h, udpComm.h: socket 'connection' may now
   be changed on the fly (w/o disconnecting first). Again, IIRC we simply
   follow BSD semantics.
 - lanIpBasic.c, lanIpBasic.h, udpComm.h: socket creation may now be
   passed a zero port number which lets the library pick an available
   port (following BSD socket semantics).
 - padProtoHost.c: added 'server' mode which can stream (simulated) data
   to a client.
 - padStream.c: bugfix; streamSim() used wrong stride in col-major mode;
   has to be 4 (n-channels) not nsamples.
2008/1/18 (TS):
 - lanIpBasic:
     - added udpSockNRead() to find number of bytes in RX queue available
	   for reading
	 - eliminated 'Peer' struct. Moved 'interface' to socket (where it
	   belongs).
	   The socket now holds a UDP header and a flag to indicate if
	   the socket is 'connected'. If 'connected' the UDP header
	   holds the peer information. If not connected the header can
	   be reused by udpSockSendTo() for various destinations.
	 - added udpSockSendTo() for communication over unconnected sockets.
	 - lock socket while in udpSockConnect()
 - drvUdpSock:
     - buffer leftover chars from a received packet for subsequent read.
 - added 'drvUdpSock' - a simple driver to provide std. filesystem
   I/O over lanIpBasic/UDP 'sockets'.
2008/1/17 (TS):
 - renamed EtherHeader -> EthHeader; there was a name conflict with
   SPEAR software / the AMD pcnet32 driver for which I wanted to add
   support.
 - added support for AMD 79c97x chips (PMC card which is handy; the
   ultimate goal is using udpComm for a GDB connection.
 - FIXED: endian-ness bug: IP checksums must not be converted to network
   byte-order.
2007/10/4 (TS):
 - udpSockSend() return value was inconsistent with BSD semantics
   (thanks to Stephen Norum) because it also counted the header bytes.
2007/9/6 (TS):
 - eliminated 'sd' argument from udpCommReturnPacket().
